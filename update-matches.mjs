import admin from "firebase-admin"; import serviceAccount from "./serviceAccountKey.json" assert { type: "json" }; admin.initializeApp({ credential: admin.credential.cert(serviceAccount) }); const db = admin.firestore(); async function updateAllMatches(eventId) { try { const participantsSnapshot = await db.collection("event_participants").where("eventId", "==", eventId).get(); console.log(`${participantsSnapshot.size} katılımcı bulundu`); for (const participantDoc of participantsSnapshot.docs) { const participant = participantDoc.data(); console.log(`${participant.userId} için eşleşmeler güncelleniyor...`); const userDoc = await db.collection("users").doc(participant.userId).get(); if (!userDoc.exists) { console.log(`${participant.userId} için kullanıcı bilgisi bulunamadı, atlanıyor...`); continue; } const user = userDoc.data(); const cardsSnapshot = await db.collection("bingo_cards").where("eventId", "==", eventId).get(); for (const cardDoc of cardsSnapshot.docs) { const card = cardDoc.data(); const updatedQuestions = card.questions.map(question => { const relevantAnswers = participant.surveyAnswers.filter(answer => { const answerText = Array.isArray(answer.answer) ? answer.answer.join(" ") : answer.answer; if (question.category === "tech-stack" && answer.questionId === "tech-stack") return true; if (question.category === "dev-role" && answer.questionId === "role") return true; if (question.category === "interests" && answer.questionId === "interests") return true; return question.text.toLowerCase().includes(answerText.toLowerCase()) || answerText.toLowerCase().includes(question.text.toLowerCase()); }); if (relevantAnswers.length > 0) { const existingMatch = question.matches?.find(m => m.userId === participant.userId); if (existingMatch) return question; const newMatch = { userId: participant.userId, user: { name: user.name, email: user.email, avatarUrl: user.avatarUrl }, surveyAnswers: relevantAnswers, matchedAt: new Date() }; return { ...question, matches: [...(question.matches || []), newMatch], updatedAt: new Date().toISOString() }; } return question; }); await cardDoc.ref.update({ questions: updatedQuestions, updatedAt: admin.firestore.Timestamp.now() }); } console.log(`${participant.userId} için eşleşmeler güncellendi`); } console.log("Tüm eşleşmeler güncellendi!"); } catch (error) { console.error("Hata:", error); } } const eventId = process.argv[2]; if (!eventId) { console.error("Lütfen bir etkinlik IDsi belirtin"); process.exit(1); } updateAllMatches(eventId);
